---
import { SIDEBAR } from '../../consts'
import { getLanguageFromURL } from '../../languages'

type Props = {
	currentPage: string
	type: TabType
	defaultActiveTab: TabType
	sidebarSections: Array<{
		text: string
		type: TabType
		children: Array<{ text: string; slug: string; isFallback?: boolean }>
	}>
	currentPageMatch: string
}

type TabType = 'learn' | 'api'

const { currentPage } = Astro.props
const currentPageMatch = currentPage.endsWith('/')
	? currentPage.slice(1, -1)
	: currentPage.slice(1)
const langCode = getLanguageFromURL(currentPage)
const sidebar = SIDEBAR[langCode]
const { type, defaultActiveTab } = Astro.props as Props
---

<nav aria-labelledby='grid-left' class='overflow-auto'>
	{
		Object.entries(sidebar).map(([header, children]) => (
			<li
				class:list={[
					'nav-group',
					type,
					defaultActiveTab === type && 'active'
				]}
			>
				<details open>
					<summary class='nav-group-title'>
						<h2 class='flex item-center select-none'>
							{header}
							<svg
								xmlns='http://www.w3.org/2000/svg'
								viewBox='0 1 16 16'
								width='16'
								height='16'
								aria-hidden='true'
							>
								<path
									fill-rule='evenodd'
									d='M6.22 3.22a.75.75 0 011.06 0l4.25 4.25a.75.75 0 010 1.06l-4.25 4.25a.75.75 0 01-1.06-1.06L9.94 8 6.22 4.28a.75.75 0 010-1.06z'
								/>
							</svg>
						</h2>
					</summary>
					<ul>
						{children.map(child => {
							const url = Astro.site?.pathname + child.link
							return (
								<li class='nav-link'>
									<a
										class='select-none'
										href={url}
										aria-current={
											currentPageMatch === child.link
												? 'page'
												: false
										}
									>
										{child.text}
									</a>
								</li>
							)
						})}
					</ul>
				</details>
			</li>
		))
	}
</nav>

<script is:inline>
	window.addEventListener('DOMContentLoaded', () => {
		var target = document.querySelector('[aria-current="page"]')
		if (target && target.offsetTop > window.innerHeight - 100) {
			document.querySelector('.nav-groups').scrollTop = target.offsetTop
		}
	})
</script>

<style>
	nav {
		width: 100%;
		margin-right: 1rem;
	}

	.nav-groups {
		height: 100%;
		padding: 2rem 0;
		overflow-x: visible;
		overflow-y: auto;
		max-height: 100vh;
	}

	.nav-groups > li + li {
		margin-top: 2rem;
	}

	.nav-groups > :first-child {
		padding-top: var(--doc-padding);
	}

	.nav-groups > :last-child {
		padding-bottom: 2rem;
		margin-bottom: var(--theme-navbar-height);
	}

	.nav-group-title {
		font-size: 1rem;
		font-weight: 700;
		padding: 0.1rem 1rem;
		text-transform: uppercase;
		margin-bottom: 0.5rem;
	}

	.nav-link a {
		font-size: 1rem;
		margin: 1px;
		padding: 0.3rem 1rem;
		font: inherit;
		color: inherit;
		text-decoration: none;
		display: block;
	}

	.nav-link a:hover,
	.nav-link a:focus {
		background-color: var(--theme-bg-hover);
	}

	.nav-link a[aria-current='page'] {
		color: var(--theme-text-accent);
		background-color: var(--theme-bg-accent);
		font-weight: 600;
	}

	@media (min-width: 50em) {
		.nav-groups {
			padding: 0;
		}
	}

	<style lang='scss' > .nav-group {
		margin-bottom: 1rem;
	}
	.nav-group .placeholder {
		opacity: 0.6;
		text-align: center;
		display: block;
	}
	@media (max-width: 50em) {
		.sm-hidden {
			display: none !important;
		}
	}
	@media (min-width: 50em) {
		.nav-group {
			display: none;
			margin-bottom: 1.75rem;
		}
	}
	.nav-group.active {
		display: block;
	}
	.nav-group-title {
		font-size: 1em;
		font-weight: 600;
		padding: 0.3rem 2rem;
	}
	.nav-link a {
		margin: 1px;
		padding: 0.3rem 2rem;
		font: inherit;
		color: var(--theme-text-lighter);
		text-decoration: none;
		display: block;
		&:hover,
		&:focus {
			background-color: var(--theme-bg-hover);
		}
		&[aria-current='page'],
		&[data-current-parent='true'] {
			color: var(--theme-text);
			background-color: var(--theme-bg-accent);
			font-weight: 500;
			/* Indicates the current page for forced colors users in older browsers */
			outline: 1px solid transparent;
			&:focus {
				outline: 2px solid;
			}
		}
		@media (forced-colors: active) {
			&[aria-current='page'],
			&[data-current-parent='true'] {
				border: 1px solid LinkText;
			}
		}
	}
	@media (min-width: 50em) {
		.nav-group-title,
		.nav-link a {
			padding: 0.2rem 1rem;
		}
	}
	:global(:root.theme-dark) .nav-link a[aria-current='page'],
	:global(:root.theme-dark) .nav-link a[data-current-parent='true'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
	.fallback {
		font-size: 0.75em;
		line-height: 1;
		font-weight: bold;
		color: var(--theme-text-light);
	}
	details > summary {
		list-style: none;
	}
	details > summary::marker,
	details > summary::-webkit-details-marker {
		display: none;
	}
	details[open] > summary svg {
		transform: rotate(90deg);
	}
	summary {
		cursor: pointer;
	}
	summary h2 {
		all: inherit;
		margin: 0;
		padding: 0;
	}
	svg {
		transform: rotate(0);
		transition: 0.15s transform ease;
		vertical-align: middle;
	}
	:global([dir='rtl']) svg {
		transform: rotate(180deg);
	}
	svg path {
		fill: currentColor;
	}
</style>

<style is:global>
	:root.theme-dark .nav-link a[aria-current='page'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}
</style>
